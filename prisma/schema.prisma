datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  slug  String @unique
  title String
  body  String
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  labels        Label[]
  todos         Todo[]
}

/// This model isn't needed unless we use passwordless sign in emails.
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique 
  expires    DateTime

  @@unique([identifier, token])
}

enum Category {
  WORK
  LEISURE
  FITNESS
}

model Label {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    Category
  name        String   @unique
  userEmail   String
  user        User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  todos       Todo[]
}

model Todo {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  duration     Int
  date         DateTime
  labelId      String  @db.ObjectId
  label        Label   @relation(fields: [labelId], references: [id], onDelete: Cascade)
  userEmail    String
  user         User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}